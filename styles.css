body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}
.father {
  display: flex;
  /* Main Axis */
  justify-content: space-around;
  width: 100%;
  height: 100vh;
}

.child {
  flex-basis: 30%;
  background: peru;
  color: white;
  font-size: 50px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.child:nth-child(2) {
  background: #000;
  flex-grow: 1;
}

/* 1.1 First Rule of Flexbox
in Flexbox, you don't talk to the children;
You need to create Flexbox Container and talk to that;
*/

/* 1.2 Main Axis and Cross Axis
Flex container has Main Axis and Cross Axis;
flex-direction by default is Row;
Main Axis is the horizontal axis by default;
Main Axis can be controlled with justify-content;
Cross Axis in the vertical axis by default;
Cross Axis can be controlled with align-items;
*/

/* 1.3 Column and Row
On flex-direction : column, Main Axis is vertical and Cross Axis is horizontal;
*/

/* 1.4 align-self and order
One of the properties that can be applied to children is
align-self;
It is rarely used but can be used to align certain item;
Another property that can be applied to children is 
order;
This is used when you cannot change the html;
By default, boxes have order of 0;
*/

/* 1.5 wrap, nowrap, reverse, align-content
Flex by default tries to keep boxes in one line even if children width need modification;
value of property flex-wrap is by default: nowrap;
If that is changed to wrap, children will maintain given widths;

You can combine flex-direction and flex-wrap with flex-wrap: wrap-reverse;

When children are wrapped, there will be horizontal space between lines;
This line can also be modified by property align-content;
*/

/* 1.6 flex-grow, flex-shrink
flex-grow and flex-shrink are properties given to the children;
Depending on the flex-shrink value, the child will shrink as much as the value compared to other children;
By default, flex-shrink value is 1, but you might want some boxes to shrink more than others;
flex-grow works the opposite way from flex-shrink;
Default flex-grow value is 0, but if value is given, that child will take all free spaces;
These are useful when making responsive design;
*/

/* 1.7 flex-basis
flex-basis is similar to width;
The main difference is that it is the initial value given before shirnking or growing;
It is the initial size but not guaranteed size;
If flex-direction is set to column, flex-basis will be heigth;
Overall, flex-basis is initial sizing for main-axis;
*/
