body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}

.grid {
  display: grid;
  grid-template-columns: repeat(4, 200px);
  grid-template-rows: 100px repeat(2, 200px) 100px;
  grid-template-areas:
    "header header header header"
    "content content content nav"
    "content content content nav"
    "footer footer footer footer";
}

.header {
  background-color: #2ecc71;
  grid-area: header;
}
.content {
  background-color: #3498db;
  grid-area: content;
}
.nav {
  background-color: #8e44ad;
  grid-area: nav;
}
.footer {
  background-color: #f39c12;
  grid-area: footer;
}

/* 2.1 Life Before Grid
Prior to introduction of Grid, it was very hard to make columns and rows with just flexbox;
You would need to consider many things considering below;
wrap, direction, etc.;
Even with all that, it was still tough to form grid;
Thus Grid was introduced;
*/

/* 2.2 CSS Grid Basic Concepts 
Just like Flexbox, Grid happens on the father element;
most things will happen on the father;
with property grid-template-columns, we can make number of columns by assigning width;
grid-template-rows will set height of rows of the grid;
if you give auto instead of width or height, the element will take all remaining space;
You can set gap between columns and rows with column-row and row-gap;
If you want universal gap, use property gap;
*/

/* 2.3 Grid Template Areas
Grid has function repeat();
When creating columns and rows, you can use it as : repeat(number of columns or rows, width or height);
grid-template-areas helps you visually design your grid from CSS;
After making each row in "" on the father; you can assign grid-area property to the children;
If you want to certain space empty, replace area name with a dot;
*/
