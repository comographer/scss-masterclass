body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen,
    Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
}

.grid {
  background: gray;
  color: white;
  display: grid;
  gap: 5px;
  height: 100vh;
  grid-template-columns: repeat(4, 100px);
  grid-template-rows: repeat(4, 100px);
  justify-content: space-evenly;
  place-content: end center;
}

.header {
  background-color: #2ecc71;
}
.content {
  background-color: #3498db;
}
.nav {
  background-color: #8e44ad;
}
.footer {
  background-color: #f39c12;
}

/* 2.1 Life Before Grid
Prior to introduction of Grid, it was very hard to make columns and rows with just flexbox;
You would need to consider many things considering below;
wrap, direction, etc.;
Even with all that, it was still tough to form grid;
Thus Grid was introduced;
*/

/* 2.2 CSS Grid Basic Concepts 
Just like Flexbox, Grid happens on the father element;
most things will happen on the father;
with property grid-template-columns, we can make number of columns by assigning width;
grid-template-rows will set height of rows of the grid;
if you give auto instead of width or height, the element will take all remaining space;
You can set gap between columns and rows with column-row and row-gap;
If you want universal gap, use property gap;
*/

/* 2.3 Grid Template Areas
Grid has function repeat();
When creating columns and rows, you can use it as : repeat(number of columns or rows, width or height);
grid-template-areas helps you visually design your grid from CSS;
After making each row in "" on the father; you can assign grid-area property to the children;
If you want to certain space empty, replace area name with a dot;
*/

/* 2.4 Rows and Columns
By assigning to the children grid-column-start & grid-column-end, 
you can determine from which line to which line the element will extend;
Same goes for grid-row-start & grid-row-end;
What you need to keep in mind is that these properties use "line" instead of column & row number;
*/

/* 2.5 Shortcuts
You can use shortcut grid-column: start number / end number
instead of using grid-column-start & grid-column-end;
Of course same goes for grid-row;
If end number === end line, you can use -1 instead of actual end line;
Instead of start / end, you can replace with span followed by number of cells;
You can also combine start / end with span;
*/

/* 2.6 Line Naming
In grid-template-columns & grid-template-rows, you can assign line names;
When given line names, you can replace numbers in grid-column & grid-row with line names;
If you want to name lines inside of repeat(), you input line-name inside of repeat();
*/

/* 2.7 Grid Template
fr or fraction takes space available;
If you do grid-template-columns: repeat(4, 1fr), each column will take each available space;
This is more useful for fluid layout;
grid-template property is basically everything in one box;
grid-template combines grid-template-columns, grid-template-rows and grid-template-areas;
first you write each row area and row height;
follow that with a / and write width of each column;
You can also combine line naming in the start and end but usually wouldn't need that;
However, repeat() does not work on grid-template
*/

/* 2.8 Place Items
Grid father can use justify-items and align-items;
By default, the values are stretch;
You can use different values to place items differently within grid cells;
stretch will not work when the children have height and/or width;
Shortcut for combining these two is place-items;
*/

/* 2.9 Place Content
Unlike justify-items & align-items, justify-content & align-content moves the grid itself;
justify-content aligns columns and align-content aligns rows;
Of course there is place-content which takes both align-content and justify-content;
*/
